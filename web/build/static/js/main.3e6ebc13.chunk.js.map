{"version":3,"sources":["serviceWorker.js","components/SendButton.js","components/TweetForm.js","components/Header.js","components/TweetCard.js","components/TweetCardList.js","components/Loader.js","pages/Tweets.js","components/App.js","client.js","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","button","margin","spacing","SendButton","classes","Button","variant","color","className","endIcon","Icon","root","display","flexWrap","textField","marginLeft","marginRight","width","withRouter","TextField","id","label","placeholder","InputLabelProps","shrink","style","fullWidth","flexGrow","menuButton","AppBar","position","Toolbar","IconButton","edge","aria-label","to","maxWidth","media","height","paddingTop","expand","transform","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","item","name","user","nameTag","charAt","created","text","Card","CardHeader","Avatar","title","subheader","CardContent","Typography","component","CardActions","disableSpacing","justifyContent","overflow","palette","background","paper","gridList","icon","AdvancedGridList","tweets","edges","listTweet","GridList","cellHeight","map","node","key","Loader","sizeUnit","size","loading","LIST_TWEETS","gql","NEW_TEET","Tweets","useQuery","variables","first","fetchPolicy","error","data","fetchMore","useMutation","createPet","newPet","updateQuery","previousResult","fetchMoreResult","console","log","__typename","nextToken","pageInfo","hasNextPage","endCursor","onSubmit","input","optimisticResponse","addPet","Math","floor","random","type","img","onClick","after","App","exact","path","http","HttpLink","uri","delay","setContext","request","Promise","success","fail","setTimeout","link","ApolloLink","from","cache","InMemoryCache","client","ApolloClient","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6FCdAC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,QAIX,SAASC,IACtB,IAAMC,EAAUP,IAEhB,OACE,6BACE,kBAACQ,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,UAAWJ,EAAQJ,OACnBS,QAAS,kBAACC,EAAA,EAAD,cAJX,SCTN,IAAMb,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCY,KAAM,CACJC,QAAS,OACTC,SAAU,QAEZC,UAAW,CACTC,WAAYhB,EAAMG,QAAQ,GAC1Bc,YAAajB,EAAMG,QAAQ,GAC3Be,MAAO,YAuCIC,eAnCG,WAChB,IAAMd,EAAUP,IAEhB,OACE,yBAAKW,UAAWJ,EAAQO,MAEtB,6BACE,kBAACQ,EAAA,EAAD,CACEC,GAAG,uBACHC,MAAM,WACNC,YAAY,SACZrB,OAAO,SACPsB,gBAAiB,CACfC,QAAQ,GAEVlB,QAAQ,aAEV,kBAACa,EAAA,EAAD,CACEC,GAAG,sBACHC,MAAM,QACNI,MAAO,CAAExB,OAAQ,GACjBqB,YAAY,SACZI,WAAS,EACTzB,OAAO,SACPsB,gBAAiB,CACfC,QAAQ,GAEVlB,QAAQ,aAEV,kBAACH,EAAD,WCvCFN,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCY,KAAM,CACJgB,SAAU,GAEZC,WAAY,CACVZ,YAAajB,EAAMG,QAAQ,QAqBhBgB,eAjBA,WACb,IAAMd,EAAUP,IAChB,OACE,yBAAKW,UAAWJ,EAAQO,MACtB,kBAACkB,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASzB,QAAQ,SACf,kBAAC0B,EAAA,EAAD,CAAYC,KAAK,QAAQzB,UAAWJ,EAAQwB,WAAYrB,MAAM,UAAU2B,aAAW,QACjF,kBAAC,IAAD,CAAMC,GAAG,KACP,kBAAC,IAAD,c,kICZRtC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCY,KAAM,CACJyB,SAAU,KAEZC,MAAO,CACLC,OAAQ,EACRC,WAAY,UAEdC,OAAQ,CACNC,UAAW,eACX1B,WAAY,OACZ2B,WAAY3C,EAAM4C,YAAYC,OAAO,YAAa,CAChDC,SAAU9C,EAAM4C,YAAYE,SAASC,YAGzCC,WAAY,CACVN,UAAW,kBAEbO,OAAQ,CACNC,gBAAiBC,IAAI,UAmCVhC,eA/BG,SAAC,GAAY,IAAXiC,EAAU,EAAVA,KACZ/C,EAAUP,IACTuD,EAAQD,EAAKE,KAAbD,KACDE,EAAUF,EAAKG,OAAO,GACtBC,EAAUL,EAAKK,QACfC,EAAON,EAAKM,KAClB,OACE,kBAACC,EAAA,EAAD,CAAMlD,UAAWJ,EAAQO,MACvB,kBAACgD,EAAA,EAAD,CACEX,OACE,kBAACY,EAAA,EAAD,CAAQ1B,aAAW,SAAS1B,UAAWJ,EAAQ4C,QAC5CM,GAGLO,MAAOT,EACPU,UAAWN,IAEb,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAY1D,QAAQ,QAAQC,MAAM,gBAAgB0D,UAAU,KAC3DR,IAGH,kBAACS,EAAA,EAAD,CAAaC,gBAAc,GACzB,kBAACnC,EAAA,EAAD,CAAYE,aAAW,oBACrB,kBAAC,IAAD,YCxDJrC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCY,KAAM,CACJC,QAAS,OACTC,SAAU,OACVuD,eAAgB,eAChBC,SAAU,SACVpB,gBAAiBlD,EAAMuE,QAAQC,WAAWC,OAE5CC,SAAU,CACRxD,MAAO,IACPqB,OAAQ,IAERG,UAAW,iBAEbiC,KAAM,CACJnE,MAAO,aAGI,SAASoE,EAAT,GAAqC,IAAVC,EAAS,EAATA,OAClCxE,EAAUP,IAGZgF,EAEAD,EAHFE,UACED,MAGJ,OACE,yBAAKrE,UAAWJ,EAAQO,MACtB,kBAACoE,EAAA,EAAD,CAAUC,WAAY,IAAK9E,QAAS,EAAGM,UAAWJ,EAAQqE,UACvDI,EAAMI,KAAI,gBAAEC,EAAF,EAAEA,KAAF,OACT,kBAAC,EAAD,CAAWC,IAAKD,EAAK9D,GAAI+B,KAAM+B,S,sBCpB1BE,EAVA,kBACb,yBAAK5E,UAAU,oBACb,kBAAC,IAAD,CACE6E,SAAU,KACVC,KAAM,IACN/E,MAAO,UACPgF,SAAS,M,wuBCCf,IAAMC,EAAcC,IAAH,KA0BXC,EAAWD,IAAH,KAWR5F,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,QAGX,SAASyF,IACtB,IAAMvF,EAAUP,IADe,EAGa+F,mBAASJ,EACnD,CACEK,UAAW,CACTC,MAAO,GAETC,YAAa,sBALTR,EAHuB,EAGvBA,QAASS,EAHc,EAGdA,MAAOC,EAHO,EAGPA,KAAMC,EAHC,EAGDA,UAHC,EAWHC,sBAAYT,EAAU,IAXnB,mBAWxBU,EAXwB,KAWbC,EAXa,KAsBzBC,EAAc,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACrC,OAAKA,GAGLC,QAAQC,IAAIF,EAAgB1B,UAAUD,OACvB,CACbC,UAAW,CACT,WAAc0B,EAAgB1B,UAAU6B,WACxCC,UAAWJ,EAAgB1B,UAAU8B,UACrCC,SAAU,CACR,WAAcL,EAAgB1B,UAAU+B,SAASF,WACjDG,YAAaN,EAAgB1B,UAAU+B,SAASC,YAChDC,UAAWP,EAAgB1B,UAAU+B,SAASE,WAEhDlC,MAAM,GAAD,mBACE0B,EAAezB,UAAUD,OAD3B,YAEE2B,EAAgB1B,UAAUD,WAd5B0B,GAuCX,OAAIhB,EACK,kBAAC,EAAD,MAGLS,GAASK,EAAOL,MACX,+CAIP,yBAAKxF,UAAU,kBACb,iCACE,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,aACb,uCAEF,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAWwG,SAlCJ,SAAAC,GACfb,EAAU,CACRP,UAAW,CAAEQ,OAAQY,GACrBC,mBAAoB,CAClBP,WAAY,WACZQ,OAAQ,CACNR,WAAY,MACZvF,GAAIgG,KAAKC,MAAsB,IAAhBD,KAAKE,SAAmB,IACvClE,KAAM6D,EAAM7D,KACZmE,KAAMN,EAAMM,KACZC,IAAK,4CA4BT,iCACE,kBAAC,EAAD,CAAe5C,OAAQqB,IACtBA,EAAKnB,UAAU+B,SAASC,aACtB,kBAACzG,EAAA,EAAD,CACGoH,QAAS,kBACPvB,EAAU,CACRL,UAAW,CACT6B,MAAOzB,EAAKnB,UAAU8B,WAExBN,iBAGDhG,QAAQ,YACRC,MAAM,UACNC,UAAWJ,EAAQJ,QAXzB,UCrIX,IAWe2H,EAXH,kBACV,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAI5D,UAAW0B,Q,iDCJnCmC,GAAO,IAAIC,KAAS,CAAEC,IAAK,2BAC3BC,GAAQC,cACZ,SAAAC,GAAO,OACL,IAAIC,SAAQ,SAACC,EAASC,GACpBC,YAAW,WACTF,MACC,WAGHG,GAAOC,KAAWC,KAAK,CAC3BT,GACAH,KAEIa,GAAQ,IAAIC,KASHC,GANA,IAAIC,KAAa,CAC9BN,QACAG,WCfII,I,OAAO,kBACX,kBAAC,IAAD,KACE,kBAAC,iBAAD,CAAgBF,OAAQA,IACtB,kBAAC,EAAD,UAKNG,IAASC,OAAO,kBAAC,GAAD,MAAUC,SAASC,eAAe,SVkH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1D,GACLS,QAAQT,MAAMA,EAAM2D,c","file":"static/js/main.3e6ebc13.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Icon from '@material-ui/core/Icon';\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function SendButton() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        endIcon={<Icon>send</Icon>}\n      >\n        Send\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { withRouter } from 'react-router'\nimport SendButton from './SendButton';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '25ch',\n  },\n}));\n\nconst TweetForm = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n\n      <div>\n        <TextField\n          id=\"outlined-margin-none\"\n          label=\"userName\"\n          placeholder=\"type..\"\n          margin=\"normal\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"outlined\"\n        />\n        <TextField\n          id=\"outlined-full-width\"\n          label=\"Tweet\"\n          style={{ margin: 8 }}\n          placeholder=\"type..\"\n          fullWidth\n          margin=\"normal\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"outlined\"\n        />\n        <SendButton />\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(TweetForm)","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { withRouter } from 'react-router'\nimport { AppBar, Toolbar} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\nimport TweetForm from './TweetForm';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst Header = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <Link to=\"/\" >\n              <HomeIcon />\n            </Link>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default withRouter(Header)","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { withRouter } from 'react-router'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nconst TweetCard = ({item}) => {\n  const classes = useStyles();\n  const {name} = item.user;\n  const nameTag = name.charAt(0); \n  const created = item.created;\n  const text = item.text;\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        avatar={\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\n            {nameTag}\n          </Avatar>\n        }\n        title={name}\n        subheader={created}\n      />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n        {text} \n        </Typography>\n      </CardContent>\n      <CardActions disableSpacing>\n        <IconButton aria-label=\"add to favorites\">\n          <FavoriteIcon />\n        </IconButton>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default withRouter(TweetCard)","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport TweetCard from './TweetCard';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: 500,\n    height: 450,\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)',\n  },\n  icon: {\n    color: 'white',\n  },\n}));\nexport default function AdvancedGridList({tweets}) {\n  const classes = useStyles();\n  const {\n    listTweet: {\n      edges,\n    }\n  } = tweets;\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={200} spacing={1} className={classes.gridList}>\n        {edges.map(({node}) => (\n          <TweetCard key={node.id} item={node}/>\n        ))}\n      </GridList>\n    </div>\n  );\n}\n","import React from 'react'\nimport ClipLoader from 'react-spinners/ClipLoader'\n\nconst Loader = () => \n  <div className='full-page-loader'>\n    <ClipLoader\n      sizeUnit={\"px\"}\n      size={150}\n      color={'#3454D1'}\n      loading={true}\n    />\n  </div> \n\nexport default Loader","import React from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport TweetCardList from '../components/TweetCardList'\nimport TweetForm from '../components/TweetForm'\nimport Loader from '../components/Loader'\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\n/* Graphql operations */\nconst LIST_TWEETS = gql` \n  query ListTweet($first: Int, $after: String){\n    listTweet(first: $first, after: $after){\n      nextToken\n      pageInfo{\n        hasNextPage\n        endCursor\n      }\n      edges{\n        node{\n          id\n          text\n          userId\n          created\n          updated\n          user{\n            id\n            name\n            created\n            updated\n          }\n        }\n      }\n    }\n  } `\n\nconst NEW_TEET = gql` \n  mutation AddTweet($id: ID!, $tweetInput: TweetInput!) {\n    addTweet(id: $id, input: $tweetInput) {\n      id\n      text \n      created\n      updaated\n    }\n  }\n`\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\nexport default function Tweets() {\n  const classes = useStyles();\n\n  const { loading, error, data, fetchMore } = useQuery(LIST_TWEETS,\n    {\n      variables: {\n        first: 2,\n      },\n      fetchPolicy: \"cache-and-network\"\n    }\n    );\n  const [createPet, newPet] = useMutation(NEW_TEET, {\n    // update(cache, { data: { addTweet } }) {\n    //   const data = cache.readQuery({ query: LIST_TWEETS})\n    //   cache.writeQuery({\n    //     query: LIST_TWEETS,\n    //     data: {pets: [addTweet, data.tweets]}\n    //   })\n    // }\n  });\n\n  \n  const updateQuery = (previousResult, { fetchMoreResult }) => {\n    if (!fetchMoreResult) {\n      return previousResult;\n    }\n    console.log(fetchMoreResult.listTweet.edges); \n    const result = {\n      listTweet: {\n        \"__typename\": fetchMoreResult.listTweet.__typename,\n        nextToken: fetchMoreResult.listTweet.nextToken,\n        pageInfo: {\n          \"__typename\": fetchMoreResult.listTweet.pageInfo.__typename,\n          hasNextPage: fetchMoreResult.listTweet.pageInfo.hasNextPage,\n          endCursor: fetchMoreResult.listTweet.pageInfo.endCursor,\n        },\n        edges: [\n            ...previousResult.listTweet.edges,\n            ...fetchMoreResult.listTweet.edges,\n          \n        ]\n      }\n    };\n    return result;\n  };\n  const onSubmit = input => {\n    createPet({\n      variables: { newPet: input },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        addPet: {\n          __typename: 'Pet',\n          id: Math.floor(Math.random() * 10000 + \"\"),\n          name: input.name,\n          type: input.type,\n          img: 'https://via.placeholder.com/300'\n\n        }\n      }\n    })\n  }\n\n   \n  if (loading) {\n    return <Loader />\n  }\n  \n  if (error || newPet.error) {\n    return <p>Eroor ococured!!</p>\n  }\n  \n  return (\n    <div className=\"page pets-page\">\n      <section>\n        <div className=\"row betwee-xs middle-xs\">\n          <div className=\"col-xs-10\">\n            <h1>Tweets</h1>\n          </div>\n          <div className=\"col-xs-2\">\n            <TweetForm onSubmit={onSubmit}/> \n          </div>\n        </div>\n      </section>\n      <section>\n        <TweetCardList tweets={data}/>\n        {data.listTweet.pageInfo.hasNextPage && (\n           <Button\n              onClick={() =>\n                fetchMore({\n                  variables: {\n                    after: data.listTweet.nextToken,\n                  },\n                  updateQuery,\n                })\n              }\n                 variant=\"contained\"\n                 color=\"default\"\n                 className={classes.button}\n                //  startIcon={<CloudUploadIcon />}\n               >\n                More \n            </Button>\n          )}\n      </section>\n    </div>\n  )\n}","import { Switch, Route } from 'react-router-dom'\nimport React, {Fragment} from 'react'\nimport Header from './Header';\nimport Tweets from '../pages/Tweets';\n\nconst App = () => (\n  <Fragment>\n    <Header />\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={Tweets} />\n      </Switch>\n    </div>\n  </Fragment>\n)\n\nexport default App","import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { ApolloLink } from \"apollo-link\";  \nimport { setContext } from 'apollo-link-context'\n\nconst http = new HttpLink({ uri: \"http://localhost:4000/\" });\nconst delay = setContext(\n  request =>\n    new Promise((success, fail) => {\n      setTimeout(() => {\n        success()\n      }, 800)\n    })\n)\nconst link = ApolloLink.from([\n  delay,\n  http\n])\nconst cache = new InMemoryCache()\n\n\nconst client = new ApolloClient({\n  link,\n  cache\n})\n\n\nexport default client\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport client from './client';\nimport './index.css';\n\nconst Root = () => (\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'))\nserviceWorker.unregister();"],"sourceRoot":""}